+class GA()
	var generation: int
	var child: [][]int
	var childFit: []int
	var parent: [][]int
	
	*func ctor()
		do me.generation :: 1
		do me.child :: #[10, 10]int
		do me.childFit :: #[10]int
		do me.parent :: #[2, 10]int
		
		for i(0, 9)
			for j(0, 9)
				do me.child[i][j] :: lib@rnd(0, 1)
			end for
		end for
		
	end func
	
	+func ga()
		;適応度計算。エリートの探索。
		var maxFitChild: int
		var maxFit: int :: -1
		for i(0, 9)
			var fit: int :: 0
			for j(0, 9)
				if(me.child[i][j] = 1)
					do fit :+ 1
				end if
			end for
			do me.childFit[i] :: fit
			if(maxFit < me.childFit[i])
				do maxFit :: me.childFit[i]
				do maxFitChild :: i
			end if
		end for
		do lib@sleep(100)
		;親の選択。2つ選ぶ。エリートを残し、もう一つはランダム。
		var rndChild: int
		while(rndChild = maxFitChild)
			do rndChild :: lib@rnd(0, 9)
		end while
		for j(0, 9)
			do me.parent[0][j] :: me.child[maxFitChild][j]
			do me.parent[1][j] :: me.child[rndChild][j]
		end for
		do lib@sleep(100)
		;2点交叉
		for i(0, 9)
			var point1: int :: lib@rnd(0, 9)
			var point2: int :: lib@rnd(point1, 9)
			;do dbg@print("p1:\{point1},p2\{point2}\n")
			for j(0, point1 - 1)
				do me.child[i][j] :: me.parent[0][j]
			end for
			for j(point1, point2 - 1)
				do me.child[i][j] :: me.parent[1][j]
			end for
			for j(point2, 9)
				do me.child[i][j] :: me.parent[0][j]
			end for
		end for
		do me.generation :+ 1
		do lib@sleep(100)
		;突然変異。5%
		for i(0, 9)
			if(lib@rnd(1, 100) <= 10)
				var rndPoint: int :: lib@rnd(0, 9)
				do me.child[i][rndPoint] :: lib@rnd(0, 1)
			end if
		end for
		
	end func
	
	+func draw()
		var spaceX: float :: (\main@WIDTH - 500.0) / 10.0
		var spaceY: float :: (\main@HEIGHT - 300.0) / 10.0
		for i(0, 9)
			do \main@font.draw(0.0, 300.0 + i $ float * spaceY, "child\{i + 1}", 0xFFFFFFFF)
			for j(0, 9)
				do \main@font.draw(300.0 + j $ float * spaceX, 300.0 + i $ float * spaceY, "\{me.child[i][j]}", 0xFFFFFFFF)
			end for
			do \main@font.draw(\main@WIDTH - 150.0, 300.0 + i $ float * spaceY, "\{me.childFit[i]}", 0xFFFFFFFF)
		end for
		
		for i(0, 1)
			do \main@font.draw(0.0, i $ float * spaceY, "parent\{i + 1}", 0xFFFFFFFF)
			for j(0, 9)
				do \main@font.draw(300.0 + j $ float * spaceX, i $ float * spaceY, "\{me.parent[i][j]}", 0xFFFFFFFF)
			end for
		end for
		
		do \main@font.draw(0.0, spaceY * 3.0, "\{me.generation}世代", 0xFFFFFFFF)
		do \main@font.draw(\main@WIDTH - 200.0, spaceY * 3.0, "適応度", 0xFFFFFFFF)
		
		
	end func
	
	+func mainloop()
		
		while(wnd@act())
			
			do me.draw()
			do me.ga()
			
			do draw@render(60)
		end while
	end func
	
end class
